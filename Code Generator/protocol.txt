==== CodeGen protocol v1.6 ====
Input
{
  "session": "id",
  "variables": [],
  "syntaxTree": {}
}
session - идентификатор сессии, который выдаётся менеджером
variables - список глобальных переменных, которые используются в программе (с указанием типа). Например: "variables": [ { "name": "someData", "type": "integer", "constValue": null } ]
syntaxTree - абстрактное синтаксическое дерево (НЕ бинарное), которое имеет рекурсивную структуру. Пример синтаксического дерева ниже:
{
  "main": [
    {
      "type": "operator",
      "operator": "assign",
      "operandLeft": {
        "type": "variable",
        "name": "someData"
      },
      "operandRight": {
        "type": "operator",
        "operator": "plus",
        "operandLeft": {
          "type": "number",
          "number": 14
        },
        "operandRight": {
          "type": "number",
          "number": 20
        }
      }
    },
    {
      "type": "call",
      "function": "writeln",
      "arguments": [
        {
          "type": "variable",
          "name": "someData"
        }
      ]
    }
  ],
  "procedures": [
    {
      "name": "Add10",
      "arguments": [
        {
          "type": "integer",
          "name": "dataZero",
          "pointer": true,
		  "const": false
        }
      ],
      "variables": [],
      "body": [
        {
          "type": "operator",
          "operator": "assign",
          "operandLeft": {
            "type": "variable",
            "name": "dataZero"
          },
          "operandRight": {
            "type": "operator",
            "operator": "plus",
            "operandLeft": {
              "type": "variable",
              "name": "dataZero"
            },
            "operandRight": {
              "type": "number",
              "number": 10
            }
          }
        }
      ]
    }
  ]
}
Для визуализации рекомендуется ресурс: https://jsonformatter.org/json-parser


Output
{
  "success": true,
  "errorDesc": "text",
  "asm": [ "line 1", "line 2" ]
}
success - true или false - успешность выполнения генерации кода. Если false, значит произошла ошибка.
errorDesc - нужно только если success=false - это описание ошибки, например "Несинтезируемая конструкция"
asm - должно быть только при success=true - список строк программы на ассемблере


Большое дополнение по входу:

==== Про рекурсивные узлы дерева:

Категория 1:
{
  "type": "operator"
}
Категория 2:
{
  "type": "number"
}
Категория 3:
{
  "type": "boolean"
}
Категория 4:
{
  "type": "call"
}
Категория 5:
{
  "type": "variable"
}
Категория 6:
{
  "type": "for"
}
Категория 7:
{
  "type": "while"
}


Категория 1 - подробно:
{
  "type": "operator",
  "operator": "u_minus",
  "operandRight": {}
}

{
  "type": "operator",
  "operator": "plus",
  "operandLeft": {},
  "operandRight": {}
}
{
  "type": "operator",
  "operator": "minus",
  "operandLeft": {},
  "operandRight": {}
}
{
  "type": "operator",
  "operator": "multiply",
  "operandLeft": {},
  "operandRight": {}
}
{
  "type": "operator",
  "operator": "divide",
  "operandLeft": {},
  "operandRight": {}
}
{
  "type": "operator",
  "operator": "div",
  "operandLeft": {},
  "operandRight": {}
}
{
  "type": "operator",
  "operator": "mod",
  "operandLeft": {},
  "operandRight": {}
}

{
  "type": "operator",
  "operator": "less",
  "operandLeft": {},
  "operandRight": {}
}
{
  "type": "operator",
  "operator": "more",
  "operandLeft": {},
  "operandRight": {}
}
{
  "type": "operator",
  "operator": "equal",
  "operandLeft": {},
  "operandRight": {}
}
{
  "type": "operator",
  "operator": "non-equal",
  "operandLeft": {},
  "operandRight": {}
}
{
  "type": "operator",
  "operator": "less-equal",
  "operandLeft": {},
  "operandRight": {}
}
{
  "type": "operator",
  "operator": "more-equal",
  "operandLeft": {},
  "operandRight": {}
}

{
  "type": "operator",
  "operator": "and",
  "operandLeft": {},
  "operandRight": {}
}
{
  "type": "operator",
  "operator": "or",
  "operandLeft": {},
  "operandRight": {}
}

Категория 2 - подробно:
{
  "type": "number",
  "number": 1234
}

Категория 3 - подробно:
{
  "type": "boolean",
  "value": true
}

Категория 4 - подробно:
{
  "type": "call",
  "function": "",
  "arguments": [
    {
      <!--Это комментарий. В этом обекте могут попасться только вычислимые значения: арифметический оператор, число или переменная. Даже boolean попасться не может.-->
    }
  ]
}

Категория 5 - подробно:
{
  "type": "variable",
  "name": ""
}

Категория 6 - подробно:
{
  "type": "for",
  "from": {},   <!--Это комментарий. В этом обекте могут попасться только вычислимые значения: арифметический оператор, число или переменная. Даже boolean попасться не может.-->
  "to": {},  <!--Это комментарий. В этом обекте могут попасться только вычислимые значения: арифметический оператор, число или переменная. Даже boolean попасться не может.-->
  "ascending": true,
  "body": [
    {}  <!--Это комментарий. В этом обекте может попасться всё что угодно.-->
  ]
}

Категория 7 - подробно:
{
  "type": "while",
  "condition": {}, <!--Это комментарий. В этом обекте могут попасться только логические значения: boolean, логический оператор или оператор сравнения.-->
  "body": [
    {}  <!--Это комментарий. В этом обекте может попасться всё что угодно.-->
  ]
}

==== Про НЕрекурсивные узлы дерева:

{
  "main": [
    {} <!--Это комментарий. В этом обекте может попасться всё что угодно.-->
  ],
  "procedures": [
    {
      "name": "",
      "arguments": [
        {
          "type": "integer",
          "name": "", <!--Это имя - одновременно и объявление -->
          "pointer": true, <!--pointer==true и const==true е могут быть одновременно-->
		  "const": false
        }
      ],
      "variables": [],  <!--Здесь может быть такое { "name": "", "type": "integer", "constValue": null } -->
      "body": [
        {} <!--Это комментарий. В этом обекте может попасться всё что угодно.-->
      ]
    }
  ]
}